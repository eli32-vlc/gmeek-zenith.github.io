{"singlePage": [], "startSite": "", "filingNum": "", "onePageListNum": 15, "commentLabelColor": "#006b75", "yearColorList": ["#bc4c00", "#0969da", "#1f883d", "#A333D0"], "i18n": "CN", "themeMode": "manual", "dayTheme": "light", "nightTheme": "dark", "urlMode": "pinyin", "script": "", "style": "", "head": "", "indexScript": "", "indexStyle": "", "bottomText": "", "showPostSource": 1, "iconList": {}, "UTC": 8, "rssSplit": "sentence", "exlink": {}, "needComment": 1, "allHead": "", "title": "Zeniths Blog", "subTitle": "My blog around tech.", "avatarUrl": "https://github.githubassets.com/favicons/favicon.svg", "GMEEK_VERSION": "last", "postListJson": {"P1": {"htmlDir": "docs/post/GFW Blog Post.html", "labels": ["wontfix"], "postTitle": "GFW Blog Post", "postUrl": "post/GFW%20Blog%20Post.html", "postSourceUrl": "https://github.com/eli32-vlc/gmeek-zenith.github.io/issues/1", "commentNum": 0, "wordCount": 6134, "description": "![Banner](https://files.catbox.moe/n1u6by.png)\n\n\nIn this blog post, we are going to talk about how the GFW (Great Firewall) functions, common tools to bypass it, and explain how China's international internet functions.\n\n### How does the GFW function?\n\nWe don't know fully how GFW works but there are research articles from China on how to build GFW. We can make some educated guesses based on the projects around us. The GFW works by doing DPI (deep packet inspection)\u2014that\u2019s how most government censorship firewalls work. It inspects your internet packets looking for blocked sites, prohibited content, etc. Then it responds back with either a server reset error or a DNS poisoning attack.\n\nResearch Articles (I am forced to put these articles on the blog.)\n\nArticle 1: [Link](https://github.com/net4people/bbs/issues/435)\n\nArticle 2: [Link](https://github.com/net4people/bbs/issues/437)\n\nArticle 3: [Link](https://github.com/net4people/bbs/issues/434)\n\n### How does the GFW detect VPNs?\n\nDPI can look for common patterns caused by common VPN protocols like OpenVPN or WireGuard. They have distinct patterns and use unique ports in their traffic. OpenVPN or WireGuard are most likely long-lived connections\u2014in human terms, these connections are being created and used indefinitely. The GFW will get suspicious of that.\n\n### How does the GFW detect common proxy protocols?\n\nThere are many detected attempts of active probing done by the GFW, where it sends a request to the server, and if the server responds like a typical proxy server (e.g., asking for auth, etc.), it will get blocked. The GFW can also look for TLS client and server TLS fingerprints\u2014if they match, you are getting blocked.\n\n### Do ShadowSocks work in these times?\n\nShadowSocks is essentially an encrypted version of SOCKS that can kind of be disguised as HTTPS traffic\u2014not fully, and we'll get to that in a moment. Due to some exploits, and since late 2021, the GFW uses real-time heuristic-based methods analyzing encrypted traffic fingerprints (e.g., byte patterns, ASCII ratios) to block ShadowSocks with low false positives. More details here: [Link](https://gfw.report/publications/usenixsecurity23/en/). The GFW also targets cloud providers more than normal IP addresses. It\u2019s more common that VPNs and proxies are blocked during sensitive times, normally around June. Also, I need to mention that ShadowSocks's author has been arrested by the Chinese authorities and has been 'drinking tea' since then (if you don\u2019t get that, it\u2019s fine). That might be a rumor but the project has been taken down due to authority issues, he/she said that him self not me.\n\n### More recent protocols to bypass the GFW\n\nIf you need an installation guide, please consult my censorship bypass guide [here](https://2305878273.7844380499.cfd/).\n\n#### NaiveProxy\n\nThe newest one and has the lowest detection because it uses normal HTTPS/2 traffic and the Chromium browser stack, which makes the TLS client server fingerprint look like Chrome\u2019s. The downside is the clients\u2014there is no client on iOS (at least any I trust), so you have to proxy through your desktop or use Android.\n\n#### VMESS\n\nPart of the V2Ray suite. It's an older protocol developed by the V2Ray Project. It supports custom encryption and can be used basically anywhere (iOS, etc.). The downside is that it\u2019s easier to detect and has slower speed due to encryption overhead.\n\n#### VLESS\n\nPart of the V2Ray suite but developed by V2Fly. It **doesn't** have built-in encryption, but it relies on TLS, which is harder to detect. You can also pair VLESS with Reality and XTLS. It\u2019s more lightweight and supports pretty much every single client. It\u2019s also faster than VMESS due to being lightweight.\n\n#### Trojan\n\nMimics HTTPS traffic. Not really maintained anymore. No new updates is being pushed through Github. Pretty much dead\u2014VLESS is better anyway. Or use NaiveProxy.\n\n#### Hysteria 2\n\nHysteria 2 is a proxy protocol designed for speed. It uses UDP and QUIC instead of slower TCP. It can also force sending multiple packets when the network is congested. It\u2019s better for gaming and low-latency applications, but the downside is that it can be blocked in places like schools where only TCP is allowed.\n\n### What are some ways to connect to these proxy servers?\n\n![Connecting to the proxy server](https://files.catbox.moe/8nohs6.png)\n\nLet me walk you through each method one by one.\n\n### Direct connection\n\nPretty easy to understand\u2014it uses NaiveProxy or V2Ray suite to connect to the proxy server directly. The upside is that it is very simple to run and is the cheapest to run. The downside is that it can be very, very slow during high peak hours like 10 p.m. in China, and it can be very easily blocked if they detect it's a proxy server.\n\n#### IPLC Forwarding\n\nFirst, we need to understand what IPLC is. IPLC stands for International Private Leased Circuit. Instead of sharing the same international output where network congestion happens, you have a dedicated cable to route your traffic through. Put simply, it\u2019s like having your own lane on the highway, and it\u2019s only reserved for you. Because it\u2019s private, it has no GFW and can\u2019t be blocked unless the owner gets arrested or something happens. It\u2019s like a local connection on your home router\u2014when the network is very slow because of congestion, your local network is still blazing fast when doing network transfers between local devices.\n\n#### Normal Forwarding\n\nHaving an inbound server in China means a more stable connection for the customer. Let\u2019s say you run an airport (proxy server company). You don\u2019t have to make the customer change servers every time it gets blocked\u2014you can do this on your end. It also means the customer or you can use ShadowSocks, and it might be more widely compatible. Unless the inbound server uses a custom international output that still has the GFW but is custom for you, like CN GIA2 (Global Internet Access). During peak hours, the speed is still going to be low. Also, it\u2019s more expensive to run and risky due to having a server in China.\n\n> Grammar and spelling fixed by AI but the text is written by Zenith.\n\u3002", "top": 0, "createdAt": 1749990668, "style": "", "script": "", "head": "", "ogImage": "https://github.githubassets.com/favicons/favicon.svg", "createdDate": "2025-06-15", "dateLabelColor": "#0969da"}}, "singeListJson": {}, "labelColorDict": {"bug": "#d73a4a", "documentation": "#0075ca", "duplicate": "#cfd3d7", "enhancement": "#a2eeef", "good first issue": "#7057ff", "help wanted": "#008672", "invalid": "#e4e669", "question": "#d876e3", "wontfix": "#ffffff"}, "displayTitle": "Zeniths Blog", "faviconUrl": "https://github.githubassets.com/favicons/favicon.svg", "ogImage": "https://github.githubassets.com/favicons/favicon.svg", "primerCSS": "<link href='https://mirrors.sustech.edu.cn/cdnjs/ajax/libs/Primer/21.0.7/primer.css' rel='stylesheet' />", "homeUrl": "https://eli32-vlc.github.io/gmeek-zenith.github.io", "prevUrl": "disabled", "nextUrl": "disabled"}